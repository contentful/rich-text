{"version":3,"file":"extend-node-type.js","names":["require","documentToHtmlString","documentToPlainTextString","GraphQLString","GraphQLInt","words","pathPrefixCacheStr","htmlCacheKey","node","internal","contentDigest","ttrCacheKey","module","exports","type","cache","pathPrefix","pluginOptions","name","cacheWrap","key","fn","cached","get","toCache","set","renderOptions","Promise","resolve","html","richTextNode","JSON","parse","content","timeToRead","plainString","wordsCount","length","avgWPM","Math","floor"],"sources":["src/extend-node-type.js"],"sourcesContent":["const { documentToHtmlString } = require(`@contentful/rich-text-html-renderer`);\nconst { documentToPlainTextString } = require(`@contentful/rich-text-plain-text-renderer`);\nconst { GraphQLString, GraphQLInt } = require(`gatsby/graphql`);\nconst words = require('lodash.words');\n\nlet pathPrefixCacheStr = ``;\nconst htmlCacheKey = (node) =>\n  `transformer-contentful-rich-text-html-${node.internal.contentDigest}-${pathPrefixCacheStr}`;\n\nconst ttrCacheKey = (node) =>\n  `transformer-contentful-rich-text-ttr-${node.internal.contentDigest}-${pathPrefixCacheStr}`;\n\nmodule.exports = ({ type, cache, pathPrefix }, pluginOptions) => {\n  if (type.name !== `ContentfulRichText`) {\n    return {};\n  }\n\n  pathPrefixCacheStr = pathPrefix || ``;\n\n  async function cacheWrap(key, fn) {\n    let cached = await cache.get(key);\n\n    if (!cached) {\n      let toCache = await fn();\n      cache.set(toCache);\n\n      return toCache;\n    }\n\n    return cached;\n  }\n\n  let { renderOptions } = pluginOptions;\n  renderOptions = renderOptions || {};\n\n  return new Promise((resolve) => {\n    return resolve({\n      html: {\n        type: GraphQLString,\n        resolve: (richTextNode) =>\n          cacheWrap(htmlCacheKey(richTextNode), () =>\n            documentToHtmlString(JSON.parse(richTextNode.internal.content), renderOptions),\n          ),\n      },\n\n      timeToRead: {\n        type: GraphQLInt,\n        resolve: (richTextNode) =>\n          cacheWrap(ttrCacheKey(richTextNode), () => {\n            let plainString = documentToPlainTextString(JSON.parse(richTextNode.internal.content));\n            let wordsCount = words(plainString).length;\n            let avgWPM = 200;\n\n            return Math.floor(wordsCount / avgWPM) || 1;\n          }),\n      },\n    });\n  });\n};\n"],"mappings":";;;;AAAA,iBAAiCA,OAAO,CAAE,qCAAoC,CAAC;EAAvEC,oBAAoB,YAApBA,oBAAoB;AAC5B,kBAAsCD,OAAO,CAAE,2CAA0C,CAAC;EAAlFE,yBAAyB,aAAzBA,yBAAyB;AACjC,kBAAsCF,OAAO,CAAE,gBAAe,CAAC;EAAvDG,aAAa,aAAbA,aAAa;EAAEC,UAAU,aAAVA,UAAU;AACjC,MAAMC,KAAK,GAAGL,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIM,kBAAkB,GAAI,EAAC;AAC3B,MAAMC,YAAY,GAAIC,IAAI,IACvB,yCAAwCA,IAAI,CAACC,QAAQ,CAACC,aAAc,IAAGJ,kBAAmB,EAAC;AAE9F,MAAMK,WAAW,GAAIH,IAAI,IACtB,wCAAuCA,IAAI,CAACC,QAAQ,CAACC,aAAc,IAAGJ,kBAAmB,EAAC;AAE7FM,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAW,CAAC,EAAEC,aAAa,KAAK;EAC/D,IAAIH,IAAI,CAACI,IAAI,KAAM,oBAAmB,EAAE;IACtC,OAAO,CAAC,CAAC;EACX;EAEAZ,kBAAkB,GAAGU,UAAU,IAAK,EAAC;EAAC,SAEvBG,SAAS;IAAA;EAAA;EAAA;IAAA,6CAAxB,WAAyBC,GAAG,EAAEC,EAAE,EAAE;MAChC,IAAIC,MAAM,SAASP,KAAK,CAACQ,GAAG,CAACH,GAAG,CAAC;MAEjC,IAAI,CAACE,MAAM,EAAE;QACX,IAAIE,OAAO,SAASH,EAAE,EAAE;QACxBN,KAAK,CAACU,GAAG,CAACD,OAAO,CAAC;QAElB,OAAOA,OAAO;MAChB;MAEA,OAAOF,MAAM;IACf,CAAC;IAAA;EAAA;EAED,IAAMI,aAAa,GAAKT,aAAa,CAA/BS,aAAa;EACnBA,aAAa,GAAGA,aAAa,IAAI,CAAC,CAAC;EAEnC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,OAAOA,OAAO,CAAC;MACbC,IAAI,EAAE;QACJf,IAAI,EAAEX,aAAa;QACnByB,OAAO,EAAGE,YAAY,IACpBX,SAAS,CAACZ,YAAY,CAACuB,YAAY,CAAC,EAAE,MACpC7B,oBAAoB,CAAC8B,IAAI,CAACC,KAAK,CAACF,YAAY,CAACrB,QAAQ,CAACwB,OAAO,CAAC,EAAEP,aAAa,CAAC;MAEpF,CAAC;MAEDQ,UAAU,EAAE;QACVpB,IAAI,EAAEV,UAAU;QAChBwB,OAAO,EAAGE,YAAY,IACpBX,SAAS,CAACR,WAAW,CAACmB,YAAY,CAAC,EAAE,MAAM;UACzC,IAAIK,WAAW,GAAGjC,yBAAyB,CAAC6B,IAAI,CAACC,KAAK,CAACF,YAAY,CAACrB,QAAQ,CAACwB,OAAO,CAAC,CAAC;UACtF,IAAIG,UAAU,GAAG/B,KAAK,CAAC8B,WAAW,CAAC,CAACE,MAAM;UAC1C,IAAIC,MAAM,GAAG,GAAG;UAEhB,OAAOC,IAAI,CAACC,KAAK,CAACJ,UAAU,GAAGE,MAAM,CAAC,IAAI,CAAC;QAC7C,CAAC;MACL;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"}